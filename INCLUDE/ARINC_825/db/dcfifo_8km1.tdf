--dcfifo_mixed_widths CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Cyclone II" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=256 LPM_SHOWAHEAD="OFF" LPM_WIDTH=64 LPM_WIDTH_R=8 LPM_WIDTHU=8 LPM_WIDTHU_R=11 MAXIMIZE_SPEED=5 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M4K" RDSYNC_DELAYPIPE=3 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRSYNC_DELAYPIPE=3 aclr data q rdclk rdempty rdreq rdusedw wrclk wrfull wrreq CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Cyclone II" LOW_POWER_MODE="AUTO" lpm_hint="MAXIMIZE_SPEED=5" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 7.1 cbx_a_gray2bin 2006:02:28:14:37:30:SJ cbx_a_graycounter 2006:05:31:11:44:48:SJ cbx_altdpram 2007:03:30:09:43:02:SJ cbx_altsyncram 2007:03:22:08:29:24:SJ cbx_cycloneii 2007:01:23:09:39:40:SJ cbx_dcfifo 2007:03:21:10:26:40:SJ cbx_fifo_common 2006:03:14:11:59:42:SJ cbx_flex10ke 2006:01:09:11:13:48:SJ cbx_lpm_add_sub 2007:01:08:11:15:18:SJ cbx_lpm_compare 2007:02:05:11:33:54:SJ cbx_lpm_counter 2007:03:22:23:17:10:SJ cbx_lpm_decode 2006:11:21:10:27:00:SJ cbx_lpm_mux 2006:11:21:10:27:10:SJ cbx_mgl 2007:04:03:14:06:46:SJ cbx_scfifo 2006:10:14:23:20:56:SJ cbx_stratix 2007:04:12:16:43:52:SJ cbx_stratixii 2007:02:12:17:08:26:SJ cbx_stratixiii 2007:03:13:14:47:12:SJ cbx_util_mgl 2007:01:15:12:22:48:SJ  VERSION_END


-- Copyright (C) 1991-2007 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_gray2bin_ccb (gray[8..0])
RETURNS ( bin[8..0]);
FUNCTION a_graycounter_g86 (aclr, clock, cnt_en)
RETURNS ( q[8..0]);
FUNCTION a_graycounter_7fc (aclr, clock, cnt_en)
RETURNS ( q[8..0]);
FUNCTION altsyncram_v631 (aclr1, address_a[7..0], address_b[10..0], addressstall_b, clock0, clock1, clocken1, data_a[63..0], wren_a)
RETURNS ( q_b[7..0]);
FUNCTION dffpipe_qe9 (clock, clrn, d[11..0])
RETURNS ( q[11..0]);
FUNCTION dffpipe_gd9 (clock, clrn, d[8..0])
RETURNS ( q[8..0]);
FUNCTION alt_synch_pipe_mc8 (clock, clrn, d[8..0])
RETURNS ( q[8..0]);
FUNCTION alt_synch_pipe_nc8 (clock, clrn, d[8..0])
RETURNS ( q[8..0]);
FUNCTION cntr_jjb (aclr, clock, cnt_en)
RETURNS ( cout, q[2..0]);

--synthesis_resources = lut 48 M4K 4 reg 94 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=S102;{-to p0addr} POWER_UP_LEVEL=LOW;{-to rdaclr} suppress_da_rule_internal=c106;{-to rdaclr} POWER_UP_LEVEL=LOW;{-to wrptr_g} suppress_da_rule_internal=s102;{ -from ""rdptr_g"" -to ""ws_dgrp|dffpipe9|dffe10a"" }CUT=ON;{ -from ""delayed_wrptr_g"" -to ""rs_dgwp|dffpipe7|dffe8a"" }CUT=ON";

SUBDESIGN dcfifo_8km1
( 
	aclr	:	input;
	data[63..0]	:	input;
	q[7..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	rdusedw[10..0]	:	output;
	wrclk	:	input;
	wrfull	:	output;
	wrreq	:	input;
) 
VARIABLE 
	rdptr_g_gray2bin : a_gray2bin_ccb;
	rs_dgwp_gray2bin : a_gray2bin_ccb;
	rdptr_g1p : a_graycounter_g86;
	wrptr_g1p : a_graycounter_7fc;
	fifo_ram : altsyncram_v631;
	delayed_wrptr_g[8..0] : dffe;
	p0addr : dffe
		WITH (
			power_up = "low"
		);
	rdaclr : dffe
		WITH (
			power_up = "low"
		);
	rdptr_b[2..0] : dffe;
	rdptr_g[8..0] : dffe;
	wrptr_g[8..0] : dffe;
	rs_brp : dffpipe_qe9;
	rs_bwp : dffpipe_gd9;
	rs_dgwp : alt_synch_pipe_mc8;
	ws_dgrp : alt_synch_pipe_nc8;
	rdusedw_sub_dataa[11..0]	:	WIRE;
	rdusedw_sub_datab[11..0]	:	WIRE;
	rdusedw_sub_result[11..0]	:	WIRE;
	rdempty_eq_comp_aeb_int	:	WIRE;
	rdempty_eq_comp_aeb	:	WIRE;
	rdempty_eq_comp_dataa[8..0]	:	WIRE;
	rdempty_eq_comp_datab[8..0]	:	WIRE;
	wrfull_eq_comp_aeb_int	:	WIRE;
	wrfull_eq_comp_aeb	:	WIRE;
	wrfull_eq_comp_dataa[8..0]	:	WIRE;
	wrfull_eq_comp_datab[8..0]	:	WIRE;
	cntr_b : cntr_jjb;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[7..0]	: WIRE;
	ram_address_b[10..0]	: WIRE;
	rdcnt_addr_ena	: WIRE;
	rs_brp_reg_data[11..0]	: WIRE;
	temp_rdusedw_sub_data[11..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[8..0]	: WIRE;

BEGIN 
	rdptr_g_gray2bin.gray[] = rdptr_g[].q;
	rs_dgwp_gray2bin.gray[] = rs_dgwp.q[];
	rdptr_g1p.aclr = (! rdaclr.q);
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = (rdcnt_addr_ena & cntr_b.cout);
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	fifo_ram.aclr1 = aclr;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! rdcnt_addr_ena);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.clocken1 = valid_rdreq;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_g[].q;
	p0addr.clk = rdclk;
	p0addr.clrn = rdaclr.q;
	p0addr.d = B"1";
	rdaclr.clk = (! rdclk);
	rdaclr.clrn = (! aclr);
	rdaclr.d = B"1";
	rdptr_b[].clk = rdclk;
	rdptr_b[].clrn = (! aclr);
	rdptr_b[].d = cntr_b.q[];
	rdptr_b[].ena = valid_rdreq;
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrptr_g[].clk = wrclk;
	wrptr_g[].clrn = (! aclr);
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rs_brp.clock = rdclk;
	rs_brp.clrn = (! aclr);
	rs_brp.d[] = rs_brp_reg_data[];
	rs_bwp.clock = rdclk;
	rs_bwp.clrn = (! aclr);
	rs_bwp.d[] = rs_dgwp_gray2bin.bin[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdusedw_sub_result[] = rdusedw_sub_dataa[] - rdusedw_sub_datab[];
	rdusedw_sub_dataa[] = temp_rdusedw_sub_data[];
	rdusedw_sub_datab[] = rs_brp.q[];
	IF (rdempty_eq_comp_dataa[] == rdempty_eq_comp_datab[]) THEN
		rdempty_eq_comp_aeb_int = VCC;
	ELSE
		rdempty_eq_comp_aeb_int = GND;
	END IF;
	rdempty_eq_comp_aeb = rdempty_eq_comp_aeb_int;
	rdempty_eq_comp_dataa[] = rs_dgwp.q[];
	rdempty_eq_comp_datab[] = rdptr_g[].q;
	IF (wrfull_eq_comp_dataa[] == wrfull_eq_comp_datab[]) THEN
		wrfull_eq_comp_aeb_int = VCC;
	ELSE
		wrfull_eq_comp_aeb_int = GND;
	END IF;
	wrfull_eq_comp_aeb = wrfull_eq_comp_aeb_int;
	wrfull_eq_comp_dataa[] = ws_dgrp.q[];
	wrfull_eq_comp_datab[] = wrptr_gs[];
	cntr_b.aclr = (! rdaclr.q);
	cntr_b.clock = rdclk;
	cntr_b.cnt_en = rdcnt_addr_ena;
	int_rdempty = rdempty_eq_comp_aeb;
	int_wrfull = wrfull_eq_comp_aeb;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[8..8].q $ wrptr_g[7..7].q), wrptr_g[6..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[8..8] $ rdptr_g1p.q[7..7]), rdptr_g1p.q[6..0], cntr_b.q[]);
	rdcnt_addr_ena = (valid_rdreq # (! p0addr.q));
	rdempty = int_rdempty;
	rdusedw[] = ( rdusedw_sub_result[10..0]);
	rs_brp_reg_data[] = ( rdptr_g_gray2bin.bin[], rdptr_b[].q);
	temp_rdusedw_sub_data[] = ( rs_bwp.q[], B"000");
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrfull = int_wrfull;
	wrptr_gs[] = ( (! wrptr_g[8..8].q), (! wrptr_g[7..7].q), wrptr_g[6..0].q);
END;
--VALID FILE
